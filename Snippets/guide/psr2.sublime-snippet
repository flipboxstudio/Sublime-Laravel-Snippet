<snippet>
    <content><![CDATA[/**
source https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide.md
--------------------------------------------------------------------------------------
 Coding Style Guide
======================================================================================
This guide extends and expands on PSR-1, the basic coding standard.

The intent of this guide is to reduce cognitive friction when scanning code from different authors.
It does so by enumerating a shared set of rules and expectations about how to format PHP code.

The style rules herein are derived from commonalities among the various member projects.
When various authors collaborate across multiple projects, it helps to have one set of guidelines to be used among all those projects. Thus, the benefit of this guide is not in the rules themselves, but in the sharing of those rules.

The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT",
"RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119.

1. Overview
--------------------------------------------------------------------------------------
- Code MUST follow a "coding style guide" PSR [PSR-1].
- Code MUST use 4 spaces for indenting, not tabs.
- There MUST NOT be a hard limit on line length; the soft limit MUST be 120 characters;
	lines SHOULD be 80 characters or less.
- There MUST be one blank line after the namespace declaration,
	and there MUST be one blank line after the block of use declarations.
- Opening braces for classes MUST go on the next line,
	and closing braces MUST go on the next line after the body.
- Opening braces for methods MUST go on the next line,
	and closing braces MUST go on the next line after the body.
- Visibility MUST be declared on all properties and methods; abstract and final MUST
	be declared before the visibility; static MUST be declared after the visibility.
- Control structure keywords MUST have one space after them; method and function calls MUST NOT.
- Opening braces for control structures MUST go on the same line, and closing braces MUST
	go on the next line after the body.
- Opening parentheses for control structures MUST NOT have a space after them,
	and closing parentheses for control structures MUST NOT have a space before.

1.1. Example
This example encompasses some of the rules below as a quick overview:

	<?php
	namespace Vendor\Package;

	use FooInterface;
	use BarClass as Bar;
	use OtherVendor\OtherPackage\BazClass;

	class Foo extends Bar implements FooInterface
	{
	    public function sampleFunction($a, $b = null)
	    {
	        if ($a === $b) {
	            bar();
	        } elseif ($a > $b) {
	            $foo->bar($arg1);
	        } else {
	            BazClass::bar($arg2, $arg3);
	        }
	    }

	    final public static function bar()
	    {
	        // method body
	    }
	}

2. General
--------------------------------------------------------------------------------------
2.1 Basic Coding Standard
Code MUST follow all rules outlined in PSR-1.

2.2 Files
- All PHP files MUST use the Unix LF (linefeed) line ending.
- All PHP files MUST end with a single blank line.
- The closing ?> tag MUST be omitted from files containing only PHP.

2.3. Lines
- There MUST NOT be a hard limit on line length.
- The soft limit on line length MUST be 120 characters;
	automated style checkers MUST warn but MUST NOT error at the soft limit.
- Lines SHOULD NOT be longer than 80 characters; lines longer than that SHOULD be split into
	multiple subsequent lines of no more than 80 characters each.
- There MUST NOT be trailing whitespace at the end of non-blank lines.
- Blank lines MAY be added to improve readability and to indicate related blocks of code.
- There MUST NOT be more than one statement per line.

2.4. Indenting
- Code MUST use an indent of 4 spaces, and MUST NOT use tabs for indenting.
	N.b.: Using only spaces, and not mixing spaces with tabs, helps to avoid problems with diffs
	patches, history, and annotations. The use of spaces also makes it easy to insert fine-grained
	sub-indentation for inter-line alignment.

2.5. Keywords and True/False/Null
- PHP keywords MUST be in lower case.
- The PHP constants true, false, and null MUST be in lower case.

3. Namespace and Use Declarations
--------------------------------------------------------------------------------------
- When present, there MUST be one blank line after the namespace declaration.
- When present, all use declarations MUST go after the namespace declaration.
- There MUST be one use keyword per declaration.
-There MUST be one blank line after the use block.
For example:

	<?php
	namespace Vendor\Package;

	use FooClass;
	use BarClass as Bar;
	use OtherVendor\OtherPackage\BazClass;

	// ... additional PHP code ...

4. Classes, Properties, and Methods
--------------------------------------------------------------------------------------
The term "class" refers to all classes, interfaces, and traits.
4.1. Extends and Implements
- The extends and implements keywords MUST be declared on the same line as the class name.
- The opening brace for the class MUST go on its own line; the closing brace for the class
	MUST go on the next line after the body.

	<?php
	namespace Vendor\Package;

	use FooClass;
	use BarClass as Bar;
	use OtherVendor\OtherPackage\BazClass;

	class ClassName extends ParentClass implements \ArrayAccess, \Countable
	{
	    // constants, properties, methods
	}

Lists of implements MAY be split across multiple lines, where each subsequent line is indented once.
When doing so, the first item in the list MUST be on the next line, and there MUST be only one
interface per line.

	<?php
	namespace Vendor\Package;

	use FooClass;
	use BarClass as Bar;
	use OtherVendor\OtherPackage\BazClass;

	class ClassName extends ParentClass implements
	    \ArrayAccess,
	    \Countable,
	    \Serializable
	{
	    // constants, properties, methods
	}

	
]]></content>
    <tabTrigger>_guide::psr2</tabTrigger>
    <scope>source.php</scope>
    <description>PSR-2</description>
</snippet>
